{"version":3,"sources":["components/User.js","actions/UserActions.js","containers/UserContainer.js","components/Page.js","actions/PageActions.js","containers/PageContainer.js","components/App.js","reducers/page.js","reducers/user.js","reducers/index.js","store/configureStore.js","registerServiceWorker.js","index.js"],"names":["User","renderTemplate","props","name","error","isFetching","className","onClick","handleLogin","console","log","this","React","Component","VK","window","UserContainer","user","connect","store","dispatch","type","Auth","login","res","session","username","first_name","payload","Error","Page","onBtnClick","e","year","currentTarget","innerText","getPhotos","renderButtons","map","item","index","key","photos","entry","id","style","padding","src","sizes","url","alt","likes","count","length","display","photosArr","cached","makeYearPhotos","selectedYear","yearPhotos","forEach","Date","date","getFullYear","push","sort","a","b","getMorePhotos","offset","Api","call","extended","v","r","concat","response","items","PageContainer","page","App","initialState","rootReducer","combineReducers","state","action","message","createStore","applyMiddleware","thunk","logger","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5a3953aa.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport class User extends React.Component {\n    renderTemplate = () => {\n        const { name, error, isFetching } = this.props\n        if (error) {\n            return <p>Во время запроса произошла ошибка, обновите страницу</p>\n        }\n        if (isFetching) {\n            return <p>Загружаю...</p>\n        }\n        if (name) {\n            return <p>Привет, {name}!</p>\n        } else {\n            return (\n                <button className=\"btn\" onClick={this.props.handleLogin}>\n                    Войти\n                </button>\n            )\n        }\n    }\n    render() {\n        console.log('render')\n        return <div className=\"ib user\">{this.renderTemplate()}</div>\n    }\n}\nUser.propTypes = {\n    name: PropTypes.string.isRequired,\n    error: PropTypes.string,\n    isFetching: PropTypes.bool.isRequired,\n    handleLogin: PropTypes.func.isRequired,\n}","const VK = window.VK;\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\n\nexport function handleLogin() {\n    return function (dispatch) {\n        dispatch({\n            type: LOGIN_REQUEST,\n        })\n\n        VK.Auth.login(res => {\n            if (res.session) {\n                let username = res.session.user.first_name\n                dispatch({\n                    type: LOGIN_SUCCESS,\n                    payload: username,\n                })\n            } else {\n                dispatch({\n                    type: LOGIN_FAIL,\n                    error: true,\n                    payload: new Error('Ошибка авторизации'),\n                })\n            }\n        }, 4) // запрос прав на доступ к photo\n    }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { User } from '../components/User';\nimport { handleLogin } from '../actions/UserActions';\n\nclass UserContainer extends React.Component {\n    render() {\n        const { user, handleLogin } = this.props\n        return (\n            <User\n                name={user.name}\n                error={user.error}\n                isFetching={user.isFetching}\n                handleLogin={handleLogin}\n            />\n        )\n    }\n}\nconst mapStateToProps = store => {\n    return {\n        user: store.user,\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleLogin: () => dispatch(handleLogin()),\n    }\n}\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserContainer)","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nexport class Page extends React.Component {\n\n    onBtnClick = e => {\n        const year = +e.currentTarget.innerText\n        this.props.getPhotos(year) // setYear -> getPhotos\n    }\n\n    renderButtons = () => {\n        const years = [2018, 2017, 2016, 2015, 2014]\n        return years.map((item, index) => { // [1]\n            return (\n                <button key={index} className=\"btn\" onClick={this.onBtnClick}>\n                    {item}\n                </button>\n            )\n        })\n    }\n\n    renderTemplate = () => {\n        const { photos, isFetching, error } = this.props\n        if (error) {\n            return <p className=\"error\">Во время загрузки фото произошла ошибка</p>\n        }\n        if (isFetching) {\n            return <p>Загрузка...</p>\n        } else {\n            return photos.map((entry) => ( // [1]\n                <div key={entry.id} className=\"photo\" style={{ padding: '10px' }}>\n                    <p>\n                        <img src={entry.sizes[0].url} alt=\"\" />\n                    </p>\n                    <p>{entry.likes.count} ❤</p>\n                </div>\n            ))\n        }\n    }\n\n    render() {\n        const { year, photos } = this.props;\n\n        return (\n            <div className=\"ib page\">\n                <h1 className='title'>ФОТО лайки</h1>\n                <p>\n                    {this.renderButtons()}\n                </p>\n                <h3>\n                    {year} год [{photos.length}]\n                    </h3>\n                <div style={{ display: 'flex' }}>\n                    {this.renderTemplate()}\n                </div>\n            </div>\n        )\n    }\n}\n\nPage.propTypes = {\n    year: PropTypes.number.isRequired,\n    photos: PropTypes.array.isRequired,\n    getPhotos: PropTypes.func.isRequired,\n    error: PropTypes.string,\n    isFetching: PropTypes.bool.isRequired,\n}","const VK = window.VK;\nexport const GET_PHOTOS_REQUEST = 'GET_PHOTOS_REQUEST';\nexport const GET_PHOTOS_SUCCESS = 'GET_PHOTOS_SUCCESS';\nexport const GET_PHOTOS_FAIL = 'GET_PHOTOS_FAIL';\nlet photosArr = [];\nlet cached = false;\n\nfunction makeYearPhotos(photos, selectedYear) {\n    let createdYear,\n        yearPhotos = []\n    photos.forEach(item => {\n        createdYear = new Date(item.date * 1000).getFullYear()\n        if (createdYear === selectedYear) {\n            yearPhotos.push(item)\n        }\n    })\n    yearPhotos.sort((a, b) => b.likes.count - a.likes.count)\n    return yearPhotos\n}\n\nfunction getMorePhotos(offset, count, year, dispatch) {\n    VK.Api.call(\n        'photos.getAll',\n        { extended: 1, count: count, offset: offset, v: '5.80' },\n        r => {\n            try {\n                photosArr = photosArr.concat(r.response.items)\n                if (offset <= r.response.count) {\n                    offset += 200 // максимальное количество фото которое можно получить за 1 запрос\n                    getMorePhotos(offset, count, year, dispatch)\n                } else {\n                    let photos = makeYearPhotos(photosArr, year)\n                    cached = true\n                    dispatch({\n                        type: GET_PHOTOS_SUCCESS,\n                        payload: photos,\n                    })\n                }\n            } catch (e) {\n                dispatch({\n                    type: GET_PHOTOS_FAIL,\n                    error: true,\n                    payload: new Error(e),\n                })\n            }\n        }\n    )\n}\n\nexport function getPhotos(year) {\n    return dispatch => {\n        dispatch({\n            type: GET_PHOTOS_REQUEST,\n            payload: year,\n        })\n        if (cached) {\n            let photos = makeYearPhotos(photosArr, year)\n            dispatch({\n                type: GET_PHOTOS_SUCCESS,\n                payload: photos,\n            })\n        } else {\n            getMorePhotos(0, 200, year, dispatch)\n        }\n    }\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Page } from '../components/Page';\nimport { getPhotos } from '../actions/PageActions';\n\nclass PageContainer extends React.Component {\n    render() {\n        const { page, getPhotos } = this.props\n        return (\n            <Page\n                photos={page.photos}\n                year={page.year}\n                isFetching={page.isFetching}\n                error={page.error}\n                getPhotos={getPhotos}\n            />\n        )\n    }\n}\nconst mapStateToProps = store => {\n    return {\n        page: store.page,\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        getPhotos: year => dispatch(getPhotos(year)),\n    }\n}\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PageContainer)","import React, { Component } from 'react';\nimport UserContainer from '../containers/UserContainer';\nimport PageContainer from '../containers/PageContainer' ;\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <PageContainer />\n        <UserContainer />\n      </div>\n    )\n  }\n}\nexport default App","import { GET_PHOTOS_REQUEST, GET_PHOTOS_SUCCESS, GET_PHOTOS_FAIL} from '../actions/PageActions'\nconst initialState = {\n    year: 2018,\n    photos: [],\n    isFetching: false, // изначально статус загрузки - ложь\n    // так как он станет true, когда запрос начнет выполнение\n    error: '',\n}\nexport function pageReducer(state = initialState, action) {\n    switch (action.type) {\n        case GET_PHOTOS_REQUEST:\n            return { ...state, year: action.payload, isFetching: true }\n        case GET_PHOTOS_SUCCESS:\n            return { ...state, photos: action.payload, isFetching: false }\n        case GET_PHOTOS_FAIL:\n            return { ...state, error: action.payload.message, isFetching: false }\n        default:\n            return state\n    }\n}","import { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAIL } from '../actions/UserActions'\nconst initialState = {\n    name: '',\n    error: '', // добавили для сохранения текста ошибки\n    isFetching: false, // добавили для реакции на статус \"загружаю\" или нет\n}\nexport function userReducer(state = initialState, action) {\n    switch (action.type) {\n        case LOGIN_REQUEST:\n            return { ...state, isFetching: true, error: '' }\n        case LOGIN_SUCCESS:\n            return { ...state, isFetching: false, name: action.payload }\n        case LOGIN_FAIL:\n            return { ...state, isFetching: false, error: action.payload.message }\n        default:\n            return state\n    }\n}","import {combineReducers} from 'redux';\nimport {pageReducer} from './page';\nimport {userReducer} from './user';\n\n\nexport const rootReducer = combineReducers({\n    page: pageReducer,\n    user: userReducer,\n})","import {createStore, applyMiddleware} from 'redux';\nimport { rootReducer } from '../reducers/index';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger))\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\n\nimport { Provider } from 'react-redux'\nimport {store} from './store/configureStore'\nimport registerServiceWorker from './registerServiceWorker'\n\nimport './index.css'\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root')\n  )\n\n  registerServiceWorker()\n"],"sourceRoot":""}